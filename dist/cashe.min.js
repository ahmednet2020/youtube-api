'use strict';

var CACHE_NAME = 'v1.1.2';
var urlsToCache = ['./index.html', './css/main.min.css', './js/main.min.js'];
//install event
self.addEventListener('install', function (e) {
  console.log("service-workers install");
  // Perform install steps
  // e.waitUntil(
  //   caches.open(CACHE_NAME)
  //     .then((cache) => {
  //       console.log('Opened cache');
  //       return cache.addAll(urlsToCache);
  //     })
  //     .then((cache) => self.skipWaiting())
  //     .catch((err)=> {
  //     	console.log(`open cashes erro: ${err}`)
  //     })
  // );
});
// active event
self.addEventListener('activate', function (e) {
  // delete any old caches
  e.waitUntil(caches.keys().then(function (keys) {
    return Promise.all(keys.map(function (key) {
      return key === CACHE_NAME ? key : caches.delete(key);
    }));
  }).then(function () {
    console.log('remove the old cashe done');
  }).catch(function () {
    console.log('remove old caches faild');
  }));
});
// fetch event
self.addEventListener('fetch', function (e) {
  e.respondWith(caches.match(e.request).then(function (response) {
    // Cache hit - return response
    if (response) {
      return response;
    }
    return fetch(e.request).then(function (response) {
      // Check if we received a valid response
      if (!response || response.status !== 200 || response.type !== 'basic') {
        return response;
      }
      var responseToCache = response.clone();
      caches.open(CACHE_NAME).then(function (cache) {
        cache.put(e.request, responseToCache);
      });
      return response;
    });
  }).catch(function () {
    return caches.match(e.request);
  }));
});
